<!-- views/ruta.hbs -->
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ruta de Micro {{busCode}}</title>
    <style>
        #map {
            width: 75%;
            height: 75%;
            margin: auto;
        }
    </style>
</head>
<body>
    <div class="content-page">
            <div class="container-fluid">
                <div class="row">
    <!-- start page title -->
                        <div class="row">
                            <div class="col-12">
                                <div class="page-title-box">
                                    <div class="page-title-right">
                                        <ol class="breadcrumb m-0">
                                            <li class="breadcrumb-item"><a href="javascript: void(0);">Transantiago App</a></li>
                                            <li class="breadcrumb-item"><a href="javascript: void(0);">Páginas</a></li>
                                            <li class="breadcrumb-item active">Mapa</li>
                                        </ol>
                                    </div>
                                    <h4 class="page-title">Ruta de la Micro {{busCode}}</h4>
                                </div>
                            </div>
                        </div>
                        <!-- end page title -->
    <div class="card">
        <div class="card-body">
            <div class="d-flex justify-content-center align-items-center">
                <div class="d-flex flex-column text-center"> 
                    <div id="map" class="w-75 h-75"></div>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>
    </div>


    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <!-- Include Bootstrap JS if needed -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <!-- Custom Script -->
<script>
    const routeData = {{{routeData}}}; // Datos de la ruta en formato GeoJSON

    // Inicializar el mapa sin especificar centro y zoom
    var map = L.map('map', {
        minZoom: 13, // Nivel de zoom mínimo permitido
        maxZoom: 19, // Nivel de zoom máximo permitido
        maxBounds: L.latLngBounds(
            L.latLng(-33.7, -71.0), // Esquina suroeste (lat, lng)
            L.latLng(-33.0, -70.3)  // Esquina noreste (lat, lng)
        )
    });

    // Añadir capa base de OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Función para agregar GeoJSON al mapa con estilos diferenciados
    function agregarRecorrido(geoJson, color, nombre) {
        if (geoJson && geoJson.features.length > 0) {
            L.geoJSON(geoJson, {
                onEachFeature: function (feature, layer) {
                    if (feature.geometry.type === "Point") {
                        // Añadir un marcador en cada paradero con un popup
                        layer.bindPopup(`<b>Paradero:</b> ${feature.properties.description}`);
                    } else if (feature.geometry.type === "LineString") {
                        // Estilizar la línea del recorrido
                        layer.setStyle({ color: color, weight: 4 });
                    }
                },
                pointToLayer: function (feature, latlng) {
                    // Personalizar los marcadores si lo deseas
                    return L.marker(latlng);
                }
            }).addTo(map).bindPopup(`<b>Recorrido:</b> ${nombre}`);
        }
    }

    // Colores para cada dirección
    const colores = {
        ida: '#00A77E',    // Verde para ida
        vuelta: '#CF152D'  // Rojo para vuelta
    };

    // Agregar recorrido de ida
    agregarRecorrido(routeData.ida, colores.ida, 'Ida');

    // Agregar recorrido de vuelta
    agregarRecorrido(routeData.vuelta, colores.vuelta, 'Vuelta');

    // Ajustar la vista del mapa para mostrar ambos recorridos
    // Obtenemos los límites de ambos recorridos
    const capas = [];
    if (routeData.ida) {
        capas.push(L.geoJSON(routeData.ida));
    }
    if (routeData.vuelta) {
        capas.push(L.geoJSON(routeData.vuelta));
    }

    if (capas.length > 0) {
        const grupo = L.featureGroup(capas);
        map.fitBounds(grupo.getBounds());
    }
</script>


</body>
</html>
